# 分表分库 Standard策略（标准分片策略）使用场景：SQL 语句中有>，>=, <=，<，=，IN 和 BETWEEN AND 操作符，都可以应用此分片策略。
# 配置Sharding-JDBC的分片策略
# 配置数据源，给数据源起名g1,g2...此处可配置多数据源
spring:
  shardingsphere:
    datasource:
      g0:
        driver-class-name: com.mysql.cj.jdbc.Driver
        password: root1234
        type: com.alibaba.druid.pool.DruidDataSource
        url: jdbc:mysql://localhost:3306/good_db_1?characterEncoding=utf-8&useUnicode=true&useSSL=false&serverTimezone=UTC
        username: root
      g1:
        driver-class-name: com.mysql.cj.jdbc.Driver
        password: root1234
        type: com.alibaba.druid.pool.DruidDataSource
        url: jdbc:mysql://localhost:3306/good_db_1?characterEncoding=utf-8&useUnicode=true&useSSL=false&serverTimezone=UTC
        username: root
      g2:
        driver-class-name: com.mysql.cj.jdbc.Driver
        password: root1234
        type: com.alibaba.druid.pool.DruidDataSource
        url: jdbc:mysql://localhost:3306/good_db_2?characterEncoding=utf-8&useUnicode=true&useSSL=false&serverTimezone=UTC
        username: root
      names: g0,g1,g2
    sharding:
      tables:
        goods:
          actual-data-nodes: g$->{1..2}.goods_$->{1..2}
          database-strategy:
            standard:
              sharding-column: user_id
              precise-algorithm-class-name: com.example.shardingjdbc.algorithm.standard.MyPreciseDatabaseAlgorithm
              range-algorithm-class-name: com.example.shardingjdbc.algorithm.standard.MyRangeDatabaseAlgorithm
          table-strategy:
            standard:
              sharding-column: user_id
              precise-algorithm-class-name: com.example.shardingjdbc.algorithm.standard.MyPreciseTableAlgorithm
              range-algorithm-class-name: com.example.shardingjdbc.algorithm.standard.MyRangeTableAlgorithm
#      default-data-source-name: g0 # 不分表分库 设置的默认数据源









