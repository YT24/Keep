# 分表分库 INLINE策略  支持 = 和 in 的查询方式(in每个库表都会查一遍)，对于范围查询会报错：
# 配置Sharding-JDBC的分片策略
# 配置数据源，给数据源起名g1,g2...此处可配置多数据源

spring:
  shardingsphere:
    datasource:
      names: g0,g1,g2
      g0:
        driver-class-name: com.mysql.cj.jdbc.Driver
        password: root
        type: com.alibaba.druid.pool.DruidDataSource
        url: jdbc:mysql://localhost:3306/goods_db_1?characterEncoding=utf-8&useUnicode=true&useSSL=false&serverTimezone=UTC
        username: root
      g1:
        driver-class-name: com.mysql.cj.jdbc.Driver
        password: root
        type: com.alibaba.druid.pool.DruidDataSource
        url: jdbc:mysql://localhost:3306/goods_db_1?characterEncoding=utf-8&useUnicode=true&useSSL=false&serverTimezone=UTC
        username: root
      g2:
        driver-class-name: com.mysql.cj.jdbc.Driver
        password: root
        type: com.alibaba.druid.pool.DruidDataSource
        url: jdbc:mysql://localhost:3306/goods_db_2?characterEncoding=utf-8&useUnicode=true&useSSL=false&serverTimezone=UTC
        username: root
    sharding:
      default-data-source-name: g0 # 不分表分库 设置的默认数据源
      default-database-strategy:
        inline:
          sharding-column: user_id
          algorithm-expression: g$->{user_id % 2 + 1}
      tables:
        goods:
          actual-data-nodes: g$->{1..2}.goods_$->{1..2}
#          key-generator:
#            column: id
#            type: SNOWFLAKE
          table-strategy:
            inline:
              sharding-column: user_id
              algorithm-expression: goods_$->{user_id % 2 + 1}
#      binding-tables: # 绑定表
#        - users,dept
#        - wq,wqe
#        - wqeed.
#        - edw











